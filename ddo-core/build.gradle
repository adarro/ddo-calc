plugins {

    id "scala"
//    id "com.diffplug.gradle.spotless" version "3.10.0"
    //  id "com.github.maiflai.scalatest" version "0.25"
    id "org.scoverage" version "3.1.5"
    //   id 'nebula.optional-base' version '3.0.3'
    //   id "org.junit.platform.gradle.plugin"

}


sourceSets {
    main {
        scala {
            srcDir { 'src/main/scala' }
        }
    }
    
    test {
        scala {
            srcDir { 'src/test/scala' }
            exclude '**/*Spec.scala'
            exclude '**/*Helper*'
            exclude '**/*Builder*'
//            include {'**/*Test.scala'}

        }
    }
    acceptanceTest {
        scala {
            srcDir { 'src/specs/scala' }
        }
        resources {
            srcDirs('src/specs/resources', 'src/test/specs')
        }
        compileClasspath += sourceSets.main.runtimeClasspath
        compileClasspath += sourceSets.test.runtimeClasspath
    }
}

task showPluginsHere {
    description = "Lists pluginAware plugins for each project"
    println "Plugins for $project.name"
    project.plugins.each {
        println it
    }
}

task acceptanceTest(type: Test) {
    description = "Runs Acceptance Tests"
    testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
    classpath += sourceSets.acceptanceTest.runtimeClasspath

}

acceptanceTest.mustRunAfter(test)
acceptanceTest.testLogging.showStandardStreams = true   // display test output on console
acceptanceTest.systemProperties['concordion.output.dir'] = "$reporting.baseDir/spec"  // write output to build/reports/spec

task allTests(type: Test) {
    description = "Runs All Unit and Acceptance Tests"
    dependsOn(test, acceptanceTest)
    group = "verification"

}

// allTests.setDependsOn {tasks.withType(Test).iterator()}
configure(acceptanceTest) {
    group = 'verification'
    description = 'Runs Acceptance Testing'
}

check.dependsOn(allTests)

// configure scalac
compileScala {

    scalaCompileOptions.encoding = 'UTF-8'
    scalaCompileOptions.deprecation = true
    scalaCompileOptions.additionalParameters = ['-feature', '-Ywarn-unused', '-Xlint', '-Xcheckinit', '-Yrangepos']
    // optionally specify host and port of the daemon:
    // scalaCompileOptions.daemonServer = "localhost:4243"
}
tasks.withType(ScalaCompile) {
    configure(scalaCompileOptions) {
        deprecation = true
        encoding = 'UTF-8'


    }
    configure(scalaCompileOptions.forkOptions) {

        memoryMaximumSize = '1g'
        jvmArgs = ['-XX:MaxPermSize=512m']
    }
}


//tasks.withType(Test) {
//    useJUnitPlatform{
//        include
//    }
//}

//test {
//    useJUnitPlatform {
//        includeEngines 'junit-jupiter', 'junit-vintage'
//    }
//}
description = 'Core DDO Objects'
dependencies {
    implementation group: 'org.scala-lang', name: 'scala-library', version: '2.12.3'
    implementation group: 'com.beachape', name: 'enumeratum_2.12', version: '1.5.10'
    implementation group: 'com.typesafe', name: 'config', version: '1.3.2'
    implementation group: 'com.github.kxbmap', name: 'configs_2.12', version: '0.4.4'
    implementation group: 'com.wix', name: 'accord-core_2.12', version: '0.7.1'
    implementation group: 'com.typesafe.scala-logging', name: 'scala-logging_2.12', version: '3.7.2'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3' //,optional
    implementation group: 'org.jetbrains', name: 'annotations', version: '15.0'
    testImplementation group: 'org.scalatest', name: 'scalatest_2.12', version: '3.0.0'
    testRuntimeOnly 'org.pegdown:pegdown:1.4.2'
    testImplementation group: 'org.mockito', name: 'mockito-all', version: '2.0.2-beta'
    //   testImplementation group: 'junit', name: 'junit', version:'4.12'
    // JUnit 5
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.2.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.2.0")
    // testRuntime("org.junit.platform:junit-platform-console:1.2.0")
    testImplementation("org.junit.platform:junit-platform-runner:1.2.0")
    acceptanceTestImplementation group: 'org.concordion', name: 'concordion', version: '2.2.0'
    acceptanceTestImplementation group: 'org.concordion', name: 'concordion-embed-extension', version: '1.2.0'
    acceptanceTestImplementation group: 'org.concordion', name: 'concordion-collapse-output-extension', version: '1.0.0'
    testImplementation group: 'com.wix', name: 'accord-scalatest_2.12', version: '0.7.1'
    testImplementation group: 'de.neuland-bfi', name: 'jade4j', version: '1.2.7'
    testImplementation group: 'net.ruippeixotog', name: 'scala-scraper_2.12', version: '1.2.0'
    testCompileOnly group: 'org.jetbrains', name: 'annotations', version: '16.0.1'

    scoverage 'org.scoverage:scalac-scoverage-plugin_2.12:1.4.0', 'org.scoverage:scalac-scoverage-runtime_2.12:1.4.0'
    implementation group: 'com.geirsson', name: 'scalafmt-core_2.12', version: '1.1.0'

}

/*
spotless {
    scala {
        target  '** /scala/*.scala'
       // exclude '** /.worksheet/*'
        scalafmt()
        // optional: you can specify a specific version or config file
      //  scalafmt('0.5.1').configFile('scalafmt.conf')
    }
}

*/
