plugins {

    id "scala"
    id "com.diffplug.gradle.spotless" version "3.10.0"
    id "com.github.maiflai.scalatest" version "0.19"
    id "org.scoverage" version "2.1.0"

}

sourceSets {
    test {
        scala {
            srcDirs('src/test/scala')
            exclude '**/*Spec.scala'
            exclude '**/*Helper*'
            exclude '**/*Builder*'
        //    include '**/*Test.scala'

        }
    }
    acceptanceTest {
        scala {
                srcDir 'src/specs/scala'
        }
        resources {
            srcDirs( 'src/specs/resources','src/test/specs')
        }
        compileClasspath += sourceSets.main.runtimeClasspath
        compileClasspath += sourceSets.test.runtimeClasspath
    }
}



task acceptanceTest(type: Test) {
    description = "Runs Acceptance Tests"
    testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
    classpath += sourceSets.acceptanceTest.runtimeClasspath

}

acceptanceTest.mustRunAfter(test)
acceptanceTest.testLogging.showStandardStreams = true   // display test output on console
acceptanceTest.systemProperties['concordion.output.dir'] = "$reporting.baseDir/spec"  // write output to build/reports/spec

task allTests {
    dependsOn tasks.withType(Test)
}

configure(acceptanceTest) {
    group = 'verification'
    description = 'Runs Acceptance Testing'
}

// configure scalac
/*compileScala {

    scalaCompileOptions.encoding = 'UTF-8'
    scalaCompileOptions.deprecation = true
    scalaCompileOptions.additionalParameters = ['-feature','-Ywarn-unused','-Xlint','-Xcheckinit','-Yrangepos']
    // optionally specify host and port of the daemon:
   // scalaCompileOptions.daemonServer = "localhost:4243"
}*/
/*tasks.withType(ScalaCompile) {
    configure(scalaCompileOptions) {
        deprecation = true
        encoding = 'UTF-8'


    }
    configure(scalaCompileOptions.forkOptions) {

        memoryMaximumSize = '1g'
        jvmArgs = ['-XX:MaxPermSize=512m']
    }
}*/

description = 'Core DDO Objects'
dependencies {
    compile group: 'org.scala-lang', name: 'scala-library', version:'2.12.3'
    compile group: 'com.beachape', name: 'enumeratum_2.12', version:'1.5.10'
    compile group: 'com.typesafe', name: 'config', version:'1.3.2'
    compile group: 'com.github.kxbmap', name: 'configs_2.12', version:'0.4.4'
    compile group: 'com.wix', name: 'accord-core_2.12', version:'0.7.1'
    compile group: 'com.typesafe.scala-logging', name: 'scala-logging_2.12', version:'3.7.2'
    compile group: 'ch.qos.logback', name: 'logback-classic', version:'1.2.3'
    compile group: 'org.jetbrains', name: 'annotations', version:'15.0'
    testCompile group: 'org.scalatest', name: 'scalatest_2.12', version:'3.0.0'
    testRuntime 'org.pegdown:pegdown:1.4.2'
    testCompile group: 'org.mockito', name: 'mockito-all', version:'2.0.2-beta'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'org.concordion', name: 'concordion', version:'2.1.1'
    testCompile group: 'org.concordion', name: 'concordion-embed-extension', version:'1.1.2'
    testCompile group: 'org.concordion', name: 'concordion-collapse-output-extension', version:'1.0.0'
    testCompile group: 'com.wix', name: 'accord-scalatest_2.12', version:'0.7.1'
    testCompile group: 'de.neuland-bfi', name: 'jade4j', version:'1.2.7'
    testCompile group: 'net.ruippeixotog', name: 'scala-scraper_2.12', version:'1.2.0'
    // https://mvnrepository.com/artifact/org.scoverage/scalac-scoverage-plugin
  //  provided group: 'org.scoverage', name: 'scalac-scoverage-plugin_2.12', version: '1.4.0-M2'

    scoverage 'org.scoverage:scalac-scoverage-plugin_2.12:1.4.0-M2', 'org.scoverage:scalac-scoverage-runtime_2.12:1.4.0-M2'
    compile  group: 'com.geirsson', name: 'scalafmt-core_2.12', version: '1.1.0'

}

spotless {
    scala {
        target  '**/scala/*.scala'
       // exclude '**/.worksheet/*'
        scalafmt()
        // optional: you can specify a specific version or config file
      //  scalafmt('0.5.1').configFile('scalafmt.conf')
    }
}
