/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2015-2021 Andre White.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {

    id "scala"
    id "java-library"
    id "com.diffplug.gradle.spotless" version "3.10.0"
    id "com.github.maiflai.scalatest" version "0.19"
    id "org.scoverage" version "3.1.5"

}

sourceSets {
    test {
        scala {
            srcDirs('src/test/scala')
            exclude '**/*Spec.scala'
            exclude '**/*Helper*'
            exclude '**/*Builder*'
            include '**/*Test.scala'

        }
    }
    acceptanceTest {
        scala {
            srcDir 'src/specs/scala'
        }
        resources {
            srcDirs('src/specs/resources', 'src/test/specs')
        }
        compileClasspath += sourceSets.main.runtimeClasspath
        compileClasspath += sourceSets.test.runtimeClasspath
    }
    integrationTest {
        scala {
            srcDirs('src/test/scala')
            // exclude '**/*Spec.scala'
            // exclude '**/*Helper*'
            // exclude '**/*Builder*'
            include '**/*IT.scala'

        }
    }
}


task acceptanceTest(type: Test) {
    description = "Runs Acceptance Tests"
    testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
    classpath += sourceSets.acceptanceTest.runtimeClasspath

}

acceptanceTest.shouldRunAfter(test)
acceptanceTest.testLogging.showStandardStreams = true   // display test output on console
acceptanceTest.systemProperties['concordion.output.dir'] = "$reporting.baseDir/spec"  // write output to build/reports/spec

task integrationTest(type: Test) {
    description = "Runs Integration Tests"
    // testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
    // classpath += sourceSets.acceptanceTest.runtimeClasspath

}

task allTests {
    dependsOn tasks.withType(Test)
}

configure(acceptanceTest) {
    group = 'verification'
    description = 'Runs Acceptance Testing'
}

scoverage {
    // Fails with "Could not get unknown property 'pluginClasspath' for object of type org.scoverage.ScoverageExtension." on gradle 5.5 (worked on 4.6-rc2
//    pluginClasspath += acceptanceTest.classpath
}

description = 'DDO Web'
dependencies {
    implementation group: 'org.scala-lang', name: 'scala-library', version: '2.12.3'
    implementation group: 'net.ruippeixotog', name: 'scala-scraper_2.12', version: '2.1.0'
    implementation group: 'com.typesafe', name: 'config', version: '1.3.4'
    implementation group: 'com.typesafe.scala-logging', name: 'scala-logging_2.12', version: '3.9.2'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation group: 'com.beachape', name: 'enumeratum_2.12', version:'1.5.13'
    implementation project(':ddo-core')
    testImplementation group: 'org.scalatest', name: 'scalatest_2.12', version: '3.2.0-SNAP10'
    testRuntimeOnly 'org.pegdown:pegdown:1.6.0'
    testImplementation group: 'org.mockito', name: 'mockito-all', version: '2.0.2-beta'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    scoverage 'org.scoverage:scalac-scoverage-plugin_2.12:1.4.0', 'org.scoverage:scalac-scoverage-runtime_2.12:1.4.0'
}


spotless {
    scala {
        target '**/scala/*.scala'
        // exclude '**/.worksheet/*'
        scalafmt()
        // optional: you can specify a specific version or config file
        //  scalafmt('0.5.1').configFile('scalafmt.conf')
    }
}

// 'Temporary* fix for java-library plugin. should be unneeded after gradle 5.x
configurations {
    apiElements {
        outgoing.variants.getByName('classes').artifact(
                file: compileScala.destinationDir,
                type: ArtifactTypeDefinition.JVM_CLASS_DIRECTORY,
                builtBy: compileScala)
    }
}